<html >

    <!-- Begin Head -->
    <head >
        <meta charset="UTF-8"  /><meta name="author" content="Martin Walther - @tinuwalther"  />
        <meta name="keywords" content="Pode, PSHTML, PowerShell, Mermaid Diagram"  />
        <meta name="description" content="Builds beatuifull HTML-Files with PSHTML from native PowerShell-Scripts"  />
        
        <link rel="stylesheet" href="\assets\BootStrap\bootstrap.min.css"/>
        <link rel="stylesheet" href='\assets\BootStrap\bootstrap-icons.css'>
        <link rel="stylesheet" href="\assets\style\style.css"/>

        <style>
            #calendar {
                margin: 20px auto;
                padding: 30px;
                background: $((Get-PodeConfig).fullCalendar.backgroundColor);
            }
            #events-log {
                margin: 20px auto;
                padding: 30px;
            }
        </style>

        <script src="\assets\BootStrap\bootstrap.bundle.min.js"></script>
        <script src="\assets\calendar\fullcalendar.main.min.js"></script>
        <script src='\assets\calendar\index.global.min.js'></script>
        <script src='/assets/calendar/psrotamaster.js'></script>

        <script>

            // Trigger the API call for getNexYear() when the page loads
            window.addEventListener('load', () => {
                getNexYear('/api/year/new'); // Call the API once the page is fully loaded
            });


            /**
            * Initializes the FullCalendar instance with events from the API and sets up form submission handling.
            * 
            * This function listens for the `DOMContentLoaded` event to ensure the DOM is fully loaded before
            * initializing the FullCalendar component. It asynchronously fetches event data from the provided API,
            * configures the calendar with this data, and renders the calendar. Additionally, the form handling logic
            * for creating new events is included, where form submissions are intercepted, and data is sent to the API.
            *
            * Main features:
            * - Loads calendar events from the API endpoint '/api/event/get'.
            * - Initializes a FullCalendar instance with various configuration options (locale, views, toolbars, etc.).
            * - Handles 'dateClick' and 'select' interactions in the calendar.
            * - Intercepts form submissions to create new events by sending form data to the API endpoint '/api/event/new'.
            *
            * @listens DOMContentLoaded
            * 
            * @example
            * The calendar is initialized and rendered once the page is fully loaded.
            */
            document.addEventListener('DOMContentLoaded', async function() {

                var calendarEl = document.getElementById('calendar');

                const calendarEvents = await loadApiData('/api/event/get');
                console.log('Loaded calendar events:', calendarEvents);

                //const pikett = getEventSummary(calendarEvents, /- Pikett$/);
                //console.log('Pikett Only:', pikett);

                const regexPikett = /^Pikett$/;
                getEventSummarySplit(calendarEvents, regexPikett).then(result => {
                    console.log('Pikett Summary:', result);
                });

                const regexPikettPier = /^Pikett Pier$/;
                getEventSummarySplit(calendarEvents, regexPikettPier).then(result => {
                    console.log('Pikett Pier Summary:', result);
                });

                // Aufruf der Funktion und Rendern der Tabelle nach dem Laden der Seite
                const summary = await getEventSummarySplit(calendarEvents, regexPikett);
                renderTable(summary); // Zeige die Daten in der Tabelle an

                // Aufruf der Funktion und Rendern der Tabelle nach dem Laden der Seite
                document.addEventListener('DOMContentLoaded', async () => {
                    const summary = await getEventSummarySplit(calendarEvents, regexPikett); // Hole die Daten
                    renderTable(summary); // Zeige die Daten in der Tabelle an
                });

                var calendar = new FullCalendar.Calendar(calendarEl, {
                    timeZone: 'local',
                    locale: 'de-CH',
                    initialView: 'dayGridMonth',
                    multiMonthMinWidth: 350,
                    headerToolbar: {
                        left: 'prevYear,prev,today,next,nextYear',
                        center: 'title',
                        right: '$((Get-PodeConfig).fullCalendar.headerToolbar)'
                    },

                    weekNumbers: false,
                    dayMaxEvents: true,
                    showNonCurrentDates: true,
                    fixedWeekCount: false,
                    weekNumberCalculation: 'ISO', // "ISO" changes the default value of firstDay from 0 (Sunnday) to 1 (Monday).
                    
                    selectable: true,
                    editable: true,
                    navLinks: true,

                    // A URL of a JSON feed that the calendar will fetch Event Objects from.
                    events: calendarEvents, //'/api/event/get',

                    dateClick: function(info) {
                        // alert('Datum angeklickt: ' + info.dateStr);
                        // Hier könntest du ein Formular oder eine Event-Erstellungsfunktion einbauen
                    },

                    select: function(info) {
                        // alert('selected ' + info.startStr + ' to ' + info.endStr);
                    }
                });

                calendar.render();

                // Prevent form submit and handle the form via JavaScript
                const form = document.querySelector('form'); // Select the form element
                form.addEventListener('submit', async function(event) {
                    event.preventDefault(); // Prevent default form submission

                    // Get form data
                    const formData = new FormData(form);
                    const data = {};
                    formData.forEach((value, key) => {
                        data[key] = value;
                    });

                    try {
                        // Perform the API call using fetch
                        const response = await fetch('/api/event/new', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json' // Send as JSON
                            },
                            body: JSON.stringify(data) // Convert form data to JSON string
                        });

                        if (response.ok) {
                            // If the request is successful, reload the page
                            // alert('Event added successfully!');
                            window.location.reload(); // Reload the page to show updated data
                        } else {
                            console.error('Request failed with status:', response.status);
                            alert('Failed to add event!');
                        }
                    } catch (error) {
                        console.error('Error occurred:', error);
                        alert('An error occurred while adding the event.');
                    }
                });

            });

        </script>

        <title >#PSRotaMaster</title><link type="image/x-icon" href="/assets/img/favicon.ico" rel="icon"  />

    </head>
    <!-- End Head -->

    <!-- Begin Body -->
    <Body >
        $($StartTime = [datetime]::now)
        <header >
            <div Class="jumbotron text-center" Id="j1" Style="padding:15; background-color:#012456"  >
                <p ><h1 >#PSRotaMaster - JS Full calendar</h1></p>
            </div>
        </header>
    
        <Section Id="section"  >
            <nav Class="navbar navbar-expand-sm bg-dark navbar-dark sticky-top"  >
                <div Class="container-fluid"  >
                    <a Class="navbar-brand" href="/" Target="_self"  >»HOME</a>
                    <button Class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#collapsibleNavbar"  >
                        <span Class="navbar-toggler-icon"  ></span>
                    </button>
                    <div Id="collapsibleNavbar" Class="collapse navbar-collapse"  >
                    <ul Class="navbar-nav"  >
                        <li Class="nav-item"  ><a Class="nav-link" href="https://github.com/tinuwalther/" Target="_blank"  >GitLab</a></li>
                        <li Class="nav-item"  ><a Class="nav-link" href="https://pshtml.readthedocs.io/en/latest/" Target="_blank"  >PSHTML</a></li>
                        <li Class="nav-item"  ><a Class="nav-link" href="https://www.w3schools.com/html/" Target="_blank"  >HTML</a></li>
                        <li Class="nav-item"  ><a Class="nav-link" href="https://getbootstrap.com/" Target="_blank"  >Bootstrap</a></li>
                        <li Class="nav-item"  ><a Class="nav-link" href="https://fullcalendar.io/" Target="_blank"  >Full calendar</a></li>
                        <li Class="nav-item"  ><a Class="nav-link" href="/ps-calendar">PS calendar</a></li>
                        <li Class="nav-item"  ><a Class="nav-link" href="/year-calendar">JS Year calendar</a></li>
                    </ul>
                    </div>
                </div>
            </nav>
        
            <div Class="Container-fluid">

                <!--div class="row align-items-center"-->

                    <!--article Id="CalendarBox"-->

                        <div id="events-log">

                            <h3>Events</h3>

                            <form action="/api/event/new" method="POST">
                                <div class="col-auto">
                                    <div class="input-group mb-3">
                                        <span class="input-group-text" id="basic-addon1">Name</span>
                                        <input class="form-control" list="datalistOptions" id="name" name="name" placeholder="Type to search...">
                                        <datalist id="datalistOptions">
                                        $($person = (Get-PodeConfig).person)
                                        $(foreach($i in $person){
                                            "<option value='$($i)'>"
                                        })
                                        </datalist><br>
                                    </div>
                                </div>

                                <div class="col-auto">
                                    <label for="start" class="form-label">Typ der Abwesenheit</label><br>
                                    <select class="form-select" size="5" aria-label="Default select example" id="type" name="type">
                                        <!--option selected>Typ der Abwesenheit</option-->
                                        $($absence = (Get-PodeConfig).absenceType)
                                        $(foreach($i in $absence.keys){
                                            "<option value='$($i)'>$($absence[$i])</option>"
                                        })
                                    </select><br>
                                </div>

                                <div class="col-auto">
                                    <label for="start" class="form-label">Startdatum</label><br>
                                    <input type="date" class="form-control" id="start" name="start"><br>
                                </div>

                                <div class="col-auto">
                                    <label for="end" class="form-label">Enddatum</label><br>
                                    <input type="date" class="form-control" id="end" name="end"><br>
                                </div>

                                <input type="submit" value="Eintragen" class="btn btn-primary mb-3">
                            </form>

                            <div id="summary">
                                <h3>Summary</h3>
                                <!-- Tabelle zur Anzeige der Pikett-Daten -->
                                    <table id="pikettTable" border="1">
                                        <thead>
                                            <tr>
                                                <th>Person</th>
                                                <th>Pikett</th>
                                                <th>Pier</th>
                                                <th>Ferien</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Hier werden die Daten eingefügt -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        <div id="calendar"></div>

                    <!--/article-->

                <!--/div-->

            </div>
        </Section>

        <pre Style="text-align:center;color:#000"  >Creates the swiss-public holidays for the given year: I ♥ PS > Invoke-WebRequest -Uri http://localhost:8080/api/year/new -Method Post -Body 2025</pre>

    </Body>
    <!-- End Body -->
 
    <!-- Begin Footer -->
    <footer>
        <div Class="container-fluid"  >

            <div Class="row align-items-center"  >

                <div Class="col-md"  >
                    <p >
                        <a Class="btn-sm btn btn-outline-success" href="#" Target="_self"  >I ♥ PS ></a>
                    </p>
                </div>
                    
                <div Class="col-md"  >
                    <p >
                        Based on <a href="https://www.powershellgallery.com/packages/Pode" Target="_blank"  >Pode</a> V$(Get-Module -Name Pode | Select-Object -Expandproperty Version) and <a href="https://www.powershellgallery.com/packages/PSHTML" Target="_blank"  >PSHTML</a>
                    </p>
                </div>

                <div Class="col-md" Style="color:#000"  >
                    <p >
                    $($TimeSpan = New-TimeSpan -Start $StartTime -End ([datetime]::now))
                    $($Formatted = $TimeSpan | ForEach-Object {'{1:0}h {2:0}m {3:0}s {4:000}ms' -f $_.Days, $_.Hours, $_.Minutes, $_.Seconds, $_.Milliseconds})
                    Created at $(Get-Date -f 'yyyy-MM-dd HH:mm:ss') in $($Formatted)
                    </p>
                </div>

            </div>

        </div>
    </footer>
    <!--End Footer -->

</html>
